services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.2.1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "7071:7071"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_OPTS: "-javaagent:/jmx/jmx_prometheus_javaagent-0.3.1.jar=7071:/jmx/kafka-metrics.yml"
    volumes:
     - "../jmx/:/jmx/"

  kconnect:
    image: confluentinc/cp-kafka-connect:6.2.4
    ports:
     - 8083:8083
     - 5005:5005
    environment:
     - CONNECT_BOOTSTRAP_SERVERS=broker:29092
     - CONNECT_GROUP_ID=kconnect
     - CONNECT_PLUGIN_PATH=/data/plugins
     - CONNECT_CLIENT_ID=kconnect
     - CONNECT_CONFIG_STORAGE_TOPIC=_kconnect-configs
     - CONNECT_OFFSET_STORAGE_TOPIC=_kconnect-offsets
     - CONNECT_STATUS_STORAGE_TOPIC=_kconnect-status
     - CONNECT_REST_ADVERTISED_HOST_NAME=kconnect
     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
     - CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR=1
     - CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR=1
     - CONNECT_STATUS_STORAGE_REPLICATION_FACTOR=1
     - CONNECT_PRODUCER_COMPRESSION_TYPE=lz4
     - CONNECT_CONSUMER_FETCH_MIN_BYTES=10000
     - CONNECT_CONSUMER_MAX_POLL_INTERVAL_MS=1800000
     - CONNECT_OFFSET_FLUSH_TIMEOUT_MS=600000
     - TZ=America/Sao_Paulo
     - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.storage.StringConverter
     - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.storage.StringConverter
     - KAFKA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005
    volumes:
     - "./data:/data/"
    healthcheck:
      disable: true
    depends_on:
     - broker

  akhq:
    image: tchiotludo/akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: "broker:29092"
              schema-registry:
                url: http://schema:8081
    depends_on:
     - broker
    ports:
      - 8080:8080

  schema:
    image: confluentinc/cp-schema-registry:7.2.1
    hostname: schema
    container_name: schema
    ports:
      - 8081:8081
    depends_on:
      - broker
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  db:
    image: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: postgres

  ksqldb-server:
    image: confluentinc/ksqldb-server:0.29.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    depends_on:
      - broker
    ports:
      - "8088:8088"
    environment:
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_BOOTSTRAP_SERVERS: broker:29092
      KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: "true"
      KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: "true"

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:0.29.0
    container_name: ksqldb-cli
    depends_on:
      - broker
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  kafka-rest:
    image: confluentinc/cp-kafka-rest:7.5.3
    depends_on:
      - broker
    ports:
      - 8082:8082/tcp
    environment:
      KAFKA_REST_HOST_NAME: 'localhost'
      KAFKA_REST_BOOTSTRAP_SERVERS: 'PLAINTEXT://broker:29092'
      KAFKA_REST_LISTENERS: 'http://0.0.0.0:8082'

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - "../prometheus/:/etc/prometheus/"

  grafana:
    image: grafana/grafana
    ports:
      - 3000:3000
